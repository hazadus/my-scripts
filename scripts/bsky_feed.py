#!/usr/bin/env -S uv run --quiet --script

# /// script
# dependencies = [
#   "atproto",
# ]
# ///
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–µ–Ω—Ç–µ Bluesky —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º atproto.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–ø–æ—Å—Ç–æ–≤: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º,
  —á—Ç–æ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç –∏ –∫—Ç–æ –µ–≥–æ —Å–¥–µ–ª–∞–ª
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
- –í—ã–≤–æ–¥ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ Markdown

Docs:
- https://github.com/MarshalX/python-atproto
- https://atproto.com/lexicons/app-bsky-feed
"""
import argparse
import datetime as dt
import os
import re
from typing import Optional

from atproto import Client


def parse_date(date_str: str | None) -> dt.date:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ YYYY-MM-DD –∏–ª–∏ —Ç–µ–∫—É—â—É—é, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞."""
    if not date_str:
        return dt.date.today()
    try:
        return dt.datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        raise SystemExit(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä 2024-10-31"
        )


def make_client() -> Client:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Bluesky —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    identifier = os.getenv("BSKY_IDENTIFIER")
    password = os.getenv("BSKY_PASSWORD")
    
    if not identifier or not password:
        raise SystemExit(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
            "export BSKY_IDENTIFIER='your-username.bsky.social'\n"
            "export BSKY_PASSWORD='your-app-password'"
        )
    
    client = Client()
    client.login(identifier, password)
    return client


def strip_html(content: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏."""
    if not content:
        return ""
    text = re.sub(r"<[^>]+>", "", content)
    return text.strip()


def html_to_markdown(content: str) -> str:
    """–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä HTML Bluesky-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Markdown.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª—è—é—Ç—Å—è.
    """
    if not content:
        return ""
    text = content
    # –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r"<\s*br\s*/?\s*>", "\n", text, flags=re.IGNORECASE)
    text = re.sub(r"</\s*p\s*>\s*<\s*p\s*>", "\n\n", text, flags=re.IGNORECASE)
    text = re.sub(r"<\s*p\s*>", "", text, flags=re.IGNORECASE)
    text = re.sub(r"</\s*p\s*>", "\n\n", text, flags=re.IGNORECASE)

    # –°—Å—ã–ª–∫–∏: <a href="URL">TEXT</a> -> [TEXT](URL)
    def _link_repl(match: re.Match) -> str:
        url = match.group(1)
        inner = match.group(2)
        inner_clean = re.sub(r"<[^>]+>", "", inner)
        return f"[{inner_clean}]({url})"

    text = re.sub(
        r"<a[^>]+href=\"([^\"]+)\"[^>]*>(.*?)</a>",
        _link_repl,
        text,
        flags=re.IGNORECASE | re.DOTALL,
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—á–∏–µ —Ç–µ–≥–∏
    text = re.sub(r"<[^>]+>", "", text)
    # –ß–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"\n{3,}", "\n\n", text).strip()
    return text


def fetch_home_for_date(
    client: Client,
    target_date: dt.date,
) -> list[dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –ª–µ–Ω—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞).

    –î–µ–ª–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–∞–∑–∞–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∫–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø–æ—Å—Ç—ã —ç—Ç–æ–π –¥–∞—Ç—ã
    (–∏–ª–∏ –ø–æ–∫–∞ –ª–µ–Ω—Ç–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è). –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –¥–æ 1000 –ø–æ—Å—Ç–æ–≤.
    """
    local_tz = dt.datetime.now().astimezone().tzinfo

    results: list[dict] = []
    cursor = None
    fetched = 0

    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –ª–µ–Ω—Ç—É
            response = client.get_timeline(limit=50, cursor=cursor)
            if not response or not response.feed:
                break

            chunk = response.feed
            fetched += len(chunk)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º cursor –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º –ø–æ—Å—Ç–∞–º
            cursor = response.cursor

            for post in chunk:
                created_at = dt.datetime.fromisoformat(
                    post.post.indexedAt.replace('Z', '+00:00')
                ).astimezone(local_tz)
                post_date = created_at.date()
                
                if post_date == target_date:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ª–æ–≥–∏–∫–æ–π –≤—ã–≤–æ–¥–∞
                    post_dict = {
                        "created_at": created_at,
                        "author": post.post.author.handle,
                        "display_name": post.post.author.displayName,
                        "content": post.post.record.get("text", ""),
                        "uri": post.post.uri,
                        "cid": post.post.cid,
                        "is_repost": hasattr(post, "reason") and post.reason is not None,
                        "repost_author": post.reason.by.handle if hasattr(post, "reason") and post.reason else None,
                        "repost_display_name": post.reason.by.displayName if hasattr(post, "reason") and post.reason else None,
                        "media": [],
                        "url": f"https://bsky.app/profile/{post.post.author.handle}/post/{post.post.uri.split('/')[-1]}"
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if hasattr(post.post, "embed") and post.post.embed:
                        if hasattr(post.post.embed, "images"):
                            for img in post.post.embed.images:
                                post_dict["media"].append({
                                    "type": "image",
                                    "url": img.fullsize,
                                    "alt": img.alt or "image"
                                })
                    
                    results.append(post_dict)

            # –ö—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç –≤ —á–∞–Ω–∫–µ —Å—Ç–∞–ª —Å—Ç–∞—Ä–µ–µ –¥–∞—Ç—ã
            if chunk:
                oldest_created = dt.datetime.fromisoformat(
                    chunk[-1].post.indexedAt.replace('Z', '+00:00')
                ).astimezone(local_tz).date()
                if oldest_created < target_date:
                    break

            if fetched >= 1000:
                break

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–Ω—Ç—ã: {e}")
            break

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
    results.sort(key=lambda s: s["created_at"])
    return results


def main() -> None:
    parser = argparse.ArgumentParser(
        description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –ª–µ–Ω—Ç—ã Bluesky –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É",
    )
    parser.add_argument(
        "date",
        nargs="?",
        help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è)",
    )
    parser.add_argument(
        "--markdown",
        action="store_true",
        help="–í—ã–≤–æ–¥–∏—Ç—å –ø–æ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown (—Å—Å—ã–ª–∫–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)",
    )
    args = parser.parse_args()

    target_date = parse_date(args.date)
    client = make_client()
    posts = fetch_home_for_date(client, target_date)

    if not posts:
        print(f"–ü–æ—Å—Ç–æ–≤ –∑–∞ {target_date.isoformat()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    print(f"–ü–æ—Å—Ç–æ–≤ –∑–∞ {target_date.isoformat()}: {len(posts)}\n")

    for post in posts:
        created_at = post["created_at"].strftime("%H:%M")
        user = post["author"]
        display_name = post["display_name"] or user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç–æ–º
        is_repost = post.get("is_repost", False)
        
        if args.markdown:
            print("----")
            if is_repost:
                # –≠—Ç–æ —Ä–µ–ø–æ—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Å—Ç–µ
                repost_user = post.get("repost_author", "unknown")
                repost_display_name = post.get("repost_display_name") or repost_user
                print(f"**üîÑ {created_at} üë§ @{user} ({display_name}) —Ä–µ–ø–æ—Å—Ç–Ω—É–ª –ø–æ—Å—Ç –æ—Ç @{repost_user} ({repost_display_name})**")
                body = html_to_markdown(post.get("content", "")) or "[–º–µ–¥–∏–∞/–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
                print(f"üí¨ {body}")
                # –ú–µ–¥–∏–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                for media in post.get("media", []):
                    if media.get("type") == "image":
                        alt = media.get("alt", "image")
                        url = media.get("url")
                        if url:
                            print(f"\n![{alt}]({url})")
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª —Ä–µ–ø–æ—Å—Ç–Ω—É—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
                if post.get("url"):
                    print(f"\n[–û—Ç–∫—Ä—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç]({post['url']})")
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
                print(f"**üïí {created_at} üë§ @{user} ({display_name})**")
                body = html_to_markdown(post.get("content", "")) or "[–º–µ–¥–∏–∞/–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
                print(f"üí¨ {body}")
                # –ú–µ–¥–∏–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                for media in post.get("media", []):
                    if media.get("type") == "image":
                        alt = media.get("alt", "image")
                        url = media.get("url")
                        if url:
                            print(f"\n![{alt}]({url})")
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ—Å—Ç–∞
                if post.get("url"):
                    print(f"\n[–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç]({post['url']})")
            print()
        else:
            if is_repost:
                # –≠—Ç–æ —Ä–µ–ø–æ—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Å—Ç–µ
                repost_user = post.get("repost_author", "unknown")
                text = strip_html(post.get("content", "")) or "[–º–µ–¥–∏–∞/–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
                print(f"{created_at} @{user} ({display_name}) —Ä–µ–ø–æ—Å—Ç–Ω—É–ª –æ—Ç @{repost_user}: {text}")
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
                text = strip_html(post.get("content", "")) or "[–º–µ–¥–∏–∞/–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
                print(f"{created_at} @{user} ({display_name}): {text}")


if __name__ == "__main__":
    main()